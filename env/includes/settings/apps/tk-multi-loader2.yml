# Copyright (c) 2017 Shotgun Software Inc.
#
# CONFIDENTIAL AND PROPRIETARY
#
# This work is provided "AS IS" and subject to the Shotgun Pipeline Toolkit
# Source Code License included in this distribution package. See LICENSE.
# By accessing, using, copying or modifying this work you indicate your
# agreement to the Shotgun Pipeline Toolkit Source Code License. All rights
# not expressly granted therein are reserved by Shotgun Software Inc.

################################################################################

includes:
- ../../app_locations.yml

################################################################################

settings.tk-multi-loader2.entities: &loader2_entities
  - caption: Current Project
    type: Hierarchy
    root: '{context.project}'
    publish_filters: []
  - caption: My Tasks
    type: Query
    entity_type: Task
    filters:
      - [project, is, '{context.project}']
      - [task_assignees, is, '{context.user}']
    hierarchy: [entity, content]
  - caption: Plates
    type: Query
    entity_type: Element
    filters:
      - [project, is, '{context.project}']
    hierarchy: [sg_shot.Shot.sg_sequence, sg_shot, code]

# houdini
settings.tk-multi-loader2.houdini:
  action_mappings:
    Alembic Cache: [import]
    Houdini Scene: [merge]
    Image: [image_plane]
    Model Sequence: [import]
    Model File: [import]
    Photoshop Image: [image_plane]
    Rendered Image: [image_plane]
    Texture: [file_cop]
  actions_hook: '{self}/{engine_name}_actions.py:{config}/tk-multi-loader2/{engine_name}_actions.py'
  entities: *loader2_entities
  publish_filters: [["sg_status_list", "is_not", null]]
  location: "@apps.tk-multi-loader2.location"

# mari
settings.tk-multi-loader2.mari:
  action_mappings:
    Alembic Cache: [geometry_import]
    Reference Camera: [camera_import]
    Model File: [geometry_import]
    UDIM Image: [create_layer_with_image]
    # TODO: #1275 add_to_image_manager action currently loads the first frame artists wanted to choose the frame number.
    Image: [add_to_image_manager]
    Rendered Image: [add_to_image_manager]
  actions_hook: '{self}/{engine_name}_actions.py:{config}/tk-multi-loader2/{engine_name}_actions.py'
  entities: *loader2_entities
  publish_filters: [["sg_status_list", "is_not", null]]
  location: "@apps.tk-multi-loader2.location"

# maya
settings.tk-multi-loader2.maya:
  action_mappings:
    Alembic Cache: [reference, import, replace_reference, create_importable_reference]
    Image: [image_plane, texture_node_with_frames]
    Maya Scene: [reference, import, replace_reference, create_importable_reference]
    Model File: [reference, import, replace_reference, create_importable_reference]
    Photoshop Image: [image_plane, texture_node_with_frames]
    Rendered Image: [image_plane, texture_node_with_frames]
    Texture: [texture_node, image_plane, texture_node_with_frames]
    UDIM Image: [udim_texture_node]
  actions_hook: '{self}/{engine_name}_actions.py:{config}/tk-multi-loader2/{engine_name}_actions.py'
  entities: *loader2_entities
  publish_filters: [["sg_status_list", "is_not", null]]
  location: "@apps.tk-multi-loader2.location"

# nuke
settings.tk-multi-loader2.nuke:
  action_mappings:
    Alembic Cache: [read_node]
    Image: [read_node]
    Model File: [read_node]
    Movie: [read_node]
    Nuke Script: [script_import]
    Photoshop Image: [read_node]
    Rendered Image: [read_node]
    Deep Rendered Image: [deep_read_node, read_node]
    Texture: [read_node]
    UDIM Image: [read_node]
  actions_hook: '{self}/{engine_name}_actions.py:{config}/tk-multi-loader2/{engine_name}_actions.py'
  entities: *loader2_entities
  publish_filters: [["sg_status_list", "is_not", null]]
  location: "@apps.tk-multi-loader2.location"

# nuke studio
settings.tk-multi-loader2.nukestudio:
  action_mappings:
    Alembic Cache: [read_node]
    Image: [read_node, clip_img_mov, clip_img_seq]
    Model File: [read_node]
    Movie: [clip_import_bin]
    Nuke Script: [script_import]
    NukeStudio Project: [open_project]
    Photoshop Image: [read_node]
    Rendered Image: [read_node]
    Texture: [read_node]
  actions_hook: '{self}/tk-nuke_actions.py:{config}/tk-multi-loader2/tk-nuke_actions.py'
  entities:
    - caption: Current Project
      type: Hierarchy
      root: '{context.project}'
      publish_filters: []
    - caption: Dept. Media Publish
      type: Query
      entity_type: Version
      filters:
        - [project, is, '{context.project}']
        - ["sg_task.Task.step.Step.short_name", in, ["layout", "anim", "light", "fx", "comp"]]
        - ["sg_path_to_movie", "is_not", ""]
      hierarchy: [entity.Shot.sg_sequence, sg_task.Task.step, entity.Shot.code, code]
    - caption: Playlists
      type: Query
      entity_type: Version
      filters:
        - [project, "is", '{context.project}']
        - ["playlists", "is_not", null]
        - ["sg_task.Task.step.Step.short_name", in, ["layout", "anim", "light", "fx", "comp"]]
        - ["sg_path_to_movie", "is_not", ""]
      hierarchy: [playlists, entity.Shot.code, code]
    - caption: My Tasks
      type: Query
      entity_type: Task
      filters:
        - [project, is, '{context.project}']
        - [task_assignees, is, '{context.user}']
      hierarchy: [entity, content]
    - caption: Plates
      type: Query
      entity_type: Element
      filters:
        - [project, is, '{context.project}']
      hierarchy: [sg_shot.Shot.sg_sequence, sg_shot, code]
  publish_filters: [["sg_status_list", "is_not", null]]
  location: "@apps.tk-multi-loader2.location"
